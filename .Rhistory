library(highcharter)
library(shiny)
getData <- function(n) {
data.frame(x = rpois(n, 100 * rbeta(n, .8, .4)),
y = rpois(n, 100 * rbeta(n, .8, .4)))
}
sim <- getData(10)
hc <- highchart() %>%
hc_add_series(data = sim, "point", hcaes(x = x, y = y))
hc
sim <- getData(6000)
hc <- highchart() %>%
hc_add_series(data = sim, "point", hcaes(x = x, y = y))
hc
str_hc <- function (hc, id) {
. <- NULL
jslns <- hc$x$hc_opts %>%
jsonlite::toJSON(pretty = TRUE, auto_unbox = TRUE, force = TRUE, null = "null") %>%
stringr::str_split("\n") %>%
head(1) %>%
unlist() %>%
stringr::str_replace("\"", "") %>%
stringr::str_replace("\":", ":")
fflag <- stringr::str_detect(jslns, "function()")
if (any(fflag)) {
jslns <- ifelse(fflag, stringr::str_replace(jslns, "\"function", "function"), jslns)
jslns <- ifelse(fflag, stringr::str_replace(jslns, "\",$", ","), jslns)
jslns <- ifelse(fflag, stringr::str_replace(jslns, "\"$", ""), jslns)
jslns <- ifelse(
fflag,
stringr::str_replace_all(jslns, "\\\\n", str_c("\\\\n", stringr::str_extract(jslns, "^\\s+"))),
jslns
)
}
jslns <- jslns %>%
unlist() %>%
tail(-1) %>%
stringr::str_c("    ",., collapse = " ") %>%
stringr::str_replace_all("\\s\\]\\,\\s\\[\\s", "],[") %>%
stringr::str_replace_all("\\s{2,}", " ") %>%
sprintf("$(function () { $('#%s').highcharts({ %s ); });", id, .)
return(jslns)
}
s <- str_hc(hc, "container2")
object.size(s)
writeLines(s, "Rchr.js")
export_hc(hc, "export.js")
highcharts <- function() {
tagList(
tags$script(src = "https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"),
tags$script(src = "http://code.highcharts.com/highcharts.js"),
tags$script(src = "http://code.highcharts.com/highcharts-more.js"),
tags$script(src = "http://code.highcharts.com/highcharts-3d.js"),
tags$script(src = "http://code.highcharts.com/modules/accessibility.js"),
tags$script(src = "http://code.highcharts.com/modules/annotations.js"),
tags$script(src = "http://code.highcharts.com/modules/boost.js"),
tags$script(src = "http://code.highcharts.com/modules/broken-axis.js"),
tags$script(src = "http://code.highcharts.com/modules/canvas-tools.js"),
tags$script(src = "http://code.highcharts.com/modules/data.js"),
tags$script(src = "http://code.highcharts.com/modules/exporting.js"),
tags$script(src = "http://code.highcharts.com/modules/drilldown.js"),
tags$script(src = "http://code.highcharts.com/modules/funnel.js"),
tags$script(src = "http://code.highcharts.com/modules/heatmap.js"),
tags$script(src = "http://code.highcharts.com/modules/no-data-to-display.js"),
tags$script(src = "http://code.highcharts.com/modules/offline-exporting.js"),
tags$script(src = "http://code.highcharts.com/modules/solid-gauge.js"),
tags$script(src = "http://code.highcharts.com/modules/treemap.js")
)
}
style <- function(id, minWidth = "310px", maxWidth = "800px",
height = "800px", margin = "0 auto") {
str <- sprintf("#%s { min-width: %s; max-width: %s; height: %s; margin: %s }",
id, minWidth, maxWidth, height, margin)
return(tags$style(str, type = "text/css"))
}
?numericInput
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 6000),
actionButton("go", "go")
),
mainPanel(
uiOutput("jq")
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling
# and div container (all must have same id)
output$jq <- renderUI({
hc <- highchart() %>%
hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
tagList(
style("plot"),
tags$script(str_hc(hc, "plot")),
tags$div(id = "plot")
)
})
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
tags$script(src = "asd")
export_hc
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 6000),
actionButton("go", "go")
),
mainPanel(
uiOutput("jq")
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
output$jq <- renderUI({
id <- "id"
hc <- highchart() %>%
hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
s <- str_hc(hc, id)
file <- sprintf("highchartsplot_%s.js", id)
writeLines(s, file)
tagList(
style(id),
tags$script(src = file),
tags$div(id = id)
)
})
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
output$jq <- renderUI({
id <- "id"
hc <- highchart() %>%
hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
s <- str_hc(hc, id)
file <- sprintf("highchartsplot_%s.js", id)
writeLines(s, file)
l <- tagList(
style(id),
tags$script(src = file),
tags$div(id = id)
)
print(l)
l
})
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
id <- "id"
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 6000),
actionButton("go", "go")
),
mainPanel(
style(id),
tags$script(src = file),
tags$div(id = id)
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
# output$jq <- renderUI({
#   hc <- highchart() %>%
#     hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
#   s <- str_hc(hc, id)
#   file <- sprintf("highchartsplot_%s.js", id)
#   writeLines(s, file)
#   l <- tagList(
#     style(id),
#     tags$script(src = file),
#     tags$div(id = id)
#   )
# })
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
id <- "id"
file <- sprintf("highchartsplot_%s.js", id)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 6000),
actionButton("go", "go")
),
mainPanel(
style(id),
tags$script(src = file),
tags$div(id = id)
)
))
ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
# output$jq <- renderUI({
#   hc <- highchart() %>%
#     hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
#   s <- str_hc(hc, id)
#   file <- sprintf("highchartsplot_%s.js", id)
#   writeLines(s, file)
#   l <- tagList(
#     style(id),
#     tags$script(src = file),
#     tags$div(id = id)
#   )
# })
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
runApp(list(ui = ui, server = server), launch.browser = TRUE)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 10),
actionButton("go", "go")
),
mainPanel(
tags$script('document.getElementById("loc").innerHTML = window.location.pathname;'),
div(id = "loc"),
style(id),
tags$script(src = file),
tags$div(id = id)
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
# output$jq <- renderUI({
#   hc <- highchart() %>%
#     hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
#   s <- str_hc(hc, id)
#   file <- sprintf("highchartsplot_%s.js", id)
#   writeLines(s, file)
#   l <- tagList(
#     style(id),
#     tags$script(src = file),
#     tags$div(id = id)
#   )
# })
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 10),
actionButton("go", "go")
),
mainPanel(
tags$script('document.getElementById("loc").innerHTML = "asd"'),
div(id = "loc"),
style(id),
tags$script(src = file),
tags$div(id = id)
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
# output$jq <- renderUI({
#   hc <- highchart() %>%
#     hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
#   s <- str_hc(hc, id)
#   file <- sprintf("highchartsplot_%s.js", id)
#   writeLines(s, file)
#   l <- tagList(
#     style(id),
#     tags$script(src = file),
#     tags$div(id = id)
#   )
# })
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 10),
actionButton("go", "go")
),
mainPanel(
tags$script('document.getElementById("loc").innerHTML = "asd"'),
style(id),
div(id = "loc"),
tags$script(src = file),
tags$div(id = id)
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
# output$jq <- renderUI({
#   hc <- highchart() %>%
#     hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
#   s <- str_hc(hc, id)
#   file <- sprintf("highchartsplot_%s.js", id)
#   writeLines(s, file)
#   l <- tagList(
#     style(id),
#     tags$script(src = file),
#     tags$div(id = id)
#   )
# })
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
ui <- fluidPage(
div("bla", id = "loc"),
tags$script('document.getElementById("loc").innerHTML = "asd"')
)
server <- function(input, output, session) { }
runApp(list(ui = ui, server = server))
ui <- fluidPage(
div("bla", id = "loc")
#tags$script('document.getElementById("loc").innerHTML = "asd"')
)
server <- function(input, output, session) { }
runApp(list(ui = ui, server = server))
ui <- fluidPage(
HTML('<div id="loc">bla</div>
<script>document.getElementById("loc").innerHTML = document.location.pathname</script>')
)
server <- function(input, output, session) { }
runApp(list(ui = ui, server = server))
ui <- fluidPage(
div("blank", id = "cwd"),
tags$script('document.getElementById("cwd").innerHTML = document.location.pathname')
)
server <- function(input, output, session) { }
runApp(list(ui = ui, server = server))
ui <- fluidPage(
h3("pwd of app"),
p("blank", id = "cwd"),
tags$script('document.getElementById("cwd").innerHTML = document.location.pathname')
)
server <- function(input, output, session) { }
runApp(list(ui = ui, server = server))
ui <- fluidPage(
strong("pwd of app:"),
p("blank", id = "cwd"),
tags$script('document.getElementById("cwd").innerHTML = document.location.pathname')
)
server <- function(input, output, session) { }
runApp(list(ui = ui, server = server))
getwd()
pwd <- getwd()
id <- "id"
pwd <- getwd()
file <- sprintf("highchartsplot_%s.js", id)
path <- file.path(pwd, file)
path
id <- "id"
pwd <- getwd()
file <- sprintf("highchartsplot_%s.js", id)
path <- file.path(pwd, file)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 10),
actionButton("go", "go"),
hr(),
strong("App is in"),
p("NULL", id = "cwd"),
tags$script('document.getElementById("cwd").innerHTML = document.location.pathname'),
strong("File is"),
p(path)
),
mainPanel(
style(id),
div(id = "loc"),
tags$script(src = path),
tags$div(id = id)
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
# output$jq <- renderUI({
#   hc <- highchart() %>%
#     hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
#   s <- str_hc(hc, id)
#   file <- sprintf("highchartsplot_%s.js", id)
#   writeLines(s, file)
#   l <- tagList(
#     style(id),
#     tags$script(src = file),
#     tags$div(id = id)
#   )
# })
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
tags$head(highcharts()),
h3("Simulate Data"),
numericInput("n", "number of points", 10),
actionButton("go", "go"),
hr(),
strong("App is in"),
p("NULL", id = "cwd"),
tags$script('document.getElementById("cwd").innerHTML = document.location.pathname'),
strong("File is"),
p(path)
),
mainPanel(
style(id),
tags$script(src = paste0("file://", path)),
tags$div(id = id)
)
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# simulation
sim <- eventReactive(input$go, {
getData(input$n)
})
# make jquery chr string from hc
# then write it as script with container styling into file
# make div w/ script that src file
# output$jq <- renderUI({
#   hc <- highchart() %>%
#     hc_add_series(data = sim(), "point", hcaes(x = x, y = y))
#   s <- str_hc(hc, id)
#   file <- sprintf("highchartsplot_%s.js", id)
#   writeLines(s, file)
#   l <- tagList(
#     style(id),
#     tags$script(src = file),
#     tags$div(id = id)
#   )
# })
}
runApp(list(ui = ui, server = server), launch.browser = TRUE)
